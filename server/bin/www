#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('project:server');
var http = require('http');
const webSocket = require('ws');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create WebSocket
 */
const ws = new webSocket.Server({ server });

//我的消息队列
let mq = []

ws.on('connection', function connection(client) {

  client.on('error', function incoming(message) {
    console.log('error: %s', message);
  });

  client.on('close', function incoming(message) {
    console.log('close: %s', message);
  });

  client.on('message', function incoming(message) {
    console.log('received: %s', message);
    let mes = JSON.parse(message)
    client.nickName = mes.from
    mq.push(mes)
    console.log('OnArrive length: %s', mq.length)
    ws.clients.forEach(function each(client) {
      // client.send(data);
      // console.log(client.nickName)
      for(let i = 0; i < mq.length; i++){
        if (client.nickName == mq[i].to) {
          client.send(JSON.stringify(mq[i]))
          console.log('send: %s', JSON.stringify(mq[i]));  
          mq.splice(i)
          console.log('onSend length: %s', mq.length)
        }
      }
      
    });
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
